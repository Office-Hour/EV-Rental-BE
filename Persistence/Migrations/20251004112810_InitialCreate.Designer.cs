// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251004112810_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BookingManagement.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Pending_Verification");

                    b.Property<Guid>("VehicleAtStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VerifiedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("RenterId");

                    b.HasIndex("VehicleAtStationId");

                    b.HasIndex("VerifiedByStaffId");

                    b.HasIndex("StartTime", "EndTime");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Fee", b =>
                {
                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("VND");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Deposit");

                    b.HasKey("FeeId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[Type] = 'Deposit'");

                    b.HasIndex("CreatedAt");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Kyc", b =>
                {
                    b.Property<Guid>("KycId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Submitted");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("National_ID");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VerifiedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KycId");

                    b.HasIndex("RenterId");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("VerifiedByStaffId");

                    b.HasIndex("Type", "Status");

                    b.ToTable("Kyc");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime>("PaidAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("ProviderReference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Paid");

                    b.HasKey("PaymentId");

                    b.HasIndex("FeeId")
                        .IsUnique();

                    b.HasIndex("PaidAt");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Renter", b =>
                {
                    b.Property<Guid>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverLicenseNo")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("RiskScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RenterId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Renter");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffId");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditTrailUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Native");

                    b.Property<string>("ProviderEnvelopeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Issued");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("ContractId");

                    b.HasIndex("RentalId");

                    b.HasIndex("Status");

                    b.HasIndex("Provider", "ProviderEnvelopeId");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Inspection", b =>
                {
                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentBatteryCapacityKwh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InspectedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("InspectorStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Pre_Rental");

                    b.HasKey("InspectionId");

                    b.HasIndex("InspectedAt");

                    b.HasIndex("InspectorStaffId");

                    b.HasIndex("RentalId", "Type")
                        .IsUnique();

                    b.ToTable("inspections", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Rental", b =>
                {
                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Reserved");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RentalId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleId1");

                    b.HasIndex("StartTime", "EndTime");

                    b.ToTable("rentals", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rentals_Score_Range", "[Score] BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DamageFound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ReportId");

                    b.HasIndex("DamageFound");

                    b.HasIndex("InspectionId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Signature", b =>
                {
                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertFingerprintSha256")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CertIssuer")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("CertSerial")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CertSubject")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EvidenceUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ProviderSignatureId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SignatureEvent")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SignatureHash")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SignatureImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("SignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("SignerIp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("SignatureId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProviderSignatureId");

                    b.HasIndex("SignedAt");

                    b.ToTable("signatures", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Pricing", b =>
                {
                    b.Property<Guid>("PricingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PricingId");

                    b.HasIndex("VehicleId", "EffectiveFrom")
                        .IsUnique();

                    b.ToTable("pricings", (string)null);

                    b.HasData(
                        new
                        {
                            PricingId = new Guid("10000000-0000-0000-0000-000000000001"),
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PricePerDay = 1500000m,
                            PricePerHour = 180000m,
                            VehicleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            PricingId = new Guid("10000000-0000-0000-0000-000000000002"),
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PricePerDay = 1800000m,
                            PricePerHour = 220000m,
                            VehicleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            PricingId = new Guid("10000000-0000-0000-0000-000000000003"),
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PricePerDay = 950000m,
                            PricePerHour = 120000m,
                            VehicleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            PricingId = new Guid("10000000-0000-0000-0000-000000000004"),
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PricePerDay = 1650000m,
                            PricePerHour = 200000m,
                            VehicleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        });
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.StaffAtStation", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleAtStation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffId", "StartTime");

                    b.HasIndex("StaffId", "EndTime");

                    b.HasIndex("StationId", "EndTime");

                    b.ToTable("staff_at_stations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.StaffTransfer", b =>
                {
                    b.Property<Guid>("StaffTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("CreatedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Draft");

                    b.Property<Guid>("ToStationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffTransferId");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("EffectiveFrom");

                    b.HasIndex("FromStationId");

                    b.HasIndex("ToStationId");

                    b.HasIndex("StaffId", "Status");

                    b.ToTable("staff_transfers", null, t =>
                        {
                            t.HasCheckConstraint("CK_StaffTransfers_FromNotEqualTo", "[FromStationId] <> [ToStationId]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Station", b =>
                {
                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StationId");

                    b.ToTable("stations", (string)null);

                    b.HasData(
                        new
                        {
                            StationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "01 Nguyen Hue, District 1, Ho Chi Minh City",
                            Latitude = 10.776889000000001,
                            Longitude = 106.700806,
                            Name = "HCMC Central Station"
                        },
                        new
                        {
                            StationId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "10 Hang Dao, Hoan Kiem, Hanoi",
                            Latitude = 21.033781000000001,
                            Longitude = 105.850176,
                            Name = "Hanoi Old Quarter Station"
                        },
                        new
                        {
                            StationId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "02 Bach Dang, Hai Chau, Da Nang",
                            Latitude = 16.067789000000001,
                            Longitude = 108.22073899999999,
                            Name = "Da Nang Riverside Station"
                        });
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BatteryCapacityKwh")
                        .HasColumnType("float");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<double>("RangeKm")
                        .HasColumnType("float");

                    b.HasKey("VehicleId");

                    b.ToTable("vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            BatteryCapacityKwh = 57.0,
                            Make = "Tesla",
                            Model = "Model 3",
                            ModelYear = 2024,
                            RangeKm = 438.0
                        },
                        new
                        {
                            VehicleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            BatteryCapacityKwh = 75.0,
                            Make = "Tesla",
                            Model = "Model Y",
                            ModelYear = 2024,
                            RangeKm = 455.0
                        },
                        new
                        {
                            VehicleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            BatteryCapacityKwh = 40.0,
                            Make = "Nissan",
                            Model = "Leaf",
                            ModelYear = 2023,
                            RangeKm = 270.0
                        },
                        new
                        {
                            VehicleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            BatteryCapacityKwh = 77.400000000000006,
                            Make = "Kia",
                            Model = "EV6",
                            ModelYear = 2024,
                            RangeKm = 500.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.VehicleAtStation", b =>
                {
                    b.Property<Guid>("VehicleAtStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CurrentBatteryCapacityKwh")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Available");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleAtStationId");

                    b.HasIndex("StationId", "EndTime");

                    b.HasIndex("VehicleId", "EndTime");

                    b.HasIndex("VehicleId", "StartTime")
                        .IsUnique();

                    b.ToTable("vehicle_at_stations", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleAtStationId = new Guid("01010101-0101-0101-0101-010101010101"),
                            CurrentBatteryCapacityKwh = 57.0,
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Available",
                            VehicleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            VehicleAtStationId = new Guid("02020202-0202-0202-0202-020202020202"),
                            CurrentBatteryCapacityKwh = 75.0,
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StationId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Available",
                            VehicleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            VehicleAtStationId = new Guid("03030303-0303-0303-0303-030303030303"),
                            CurrentBatteryCapacityKwh = 40.0,
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StationId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Available",
                            VehicleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            VehicleAtStationId = new Guid("04040404-0404-0404-0404-040404040404"),
                            CurrentBatteryCapacityKwh = 77.400000000000006,
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StationId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Available",
                            VehicleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        });
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.VehicleTransfer", b =>
                {
                    b.Property<Guid>("VehicleTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<Guid>("CreatedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DropoffNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DroppedOffAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DroppedOffByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PickedUpByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PickupNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ScheduledDropoffAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledPickupAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Draft");

                    b.Property<Guid>("ToStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleTransferId");

                    b.HasIndex("ApprovedByAdminId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("DroppedOffByStaffId");

                    b.HasIndex("PickedUpByStaffId");

                    b.HasIndex("ScheduledDropoffAt");

                    b.HasIndex("ScheduledPickupAt");

                    b.HasIndex("StaffId");

                    b.HasIndex("Status");

                    b.HasIndex("ToStationId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("FromStationId", "ToStationId");

                    b.ToTable("vehicle_transfers", null, t =>
                        {
                            t.HasCheckConstraint("CK_VehicleTransfers_FromNotEqualTo", "[FromStationId] <> [ToStationId]");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Booking", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Renter", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.VehicleAtStation", "VehicleAtStation")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleAtStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookingManagement.Staff", "VerifiedByStaff")
                        .WithMany("VerifiedBookings")
                        .HasForeignKey("VerifiedByStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Renter");

                    b.Navigation("VehicleAtStation");

                    b.Navigation("VerifiedByStaff");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Fee", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Booking", "Booking")
                        .WithMany("Fees")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Kyc", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Renter", "Renter")
                        .WithMany("Kycs")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookingManagement.Staff", "VerifiedByStaff")
                        .WithMany()
                        .HasForeignKey("VerifiedByStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Renter");

                    b.Navigation("VerifiedByStaff");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Payment", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Fee", "Fee")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.BookingManagement.Payment", "FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Contract", b =>
                {
                    b.HasOne("Domain.Entities.RentalManagement.Rental", "Rental")
                        .WithMany("Contracts")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Inspection", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Staff", "InspectorStaff")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectorStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RentalManagement.Rental", "Rental")
                        .WithMany("Inspections")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectorStaff");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Rental", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Booking", "Booking")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.RentalManagement.Rental", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Vehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Report", b =>
                {
                    b.HasOne("Domain.Entities.RentalManagement.Inspection", "Inspection")
                        .WithMany("Reports")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Signature", b =>
                {
                    b.HasOne("Domain.Entities.RentalManagement.Contract", "Contract")
                        .WithMany("Signatures")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Pricing", b =>
                {
                    b.HasOne("Domain.Entities.StationManagement.Vehicle", "Vehicle")
                        .WithMany("Pricings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.StaffAtStation", b =>
                {
                    b.HasOne("Domain.Entities.BookingManagement.Staff", "Staff")
                        .WithMany("StaffAtStations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Station", "Station")
                        .WithMany("StaffAtStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.StaffTransfer", b =>
                {
                    b.HasOne("Domain.Entities.StationManagement.Admin", "ApprovedByAdmin")
                        .WithMany()
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.StationManagement.Admin", "CreatedByAdmin")
                        .WithMany()
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Station", "FromStation")
                        .WithMany()
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookingManagement.Staff", "Staff")
                        .WithMany("StaffTransfers")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByAdmin");

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("FromStation");

                    b.Navigation("Staff");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.VehicleAtStation", b =>
                {
                    b.HasOne("Domain.Entities.StationManagement.Station", "Station")
                        .WithMany("VehicleAtStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Vehicle", "Vehicle")
                        .WithMany("VehicleAtStations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.VehicleTransfer", b =>
                {
                    b.HasOne("Domain.Entities.StationManagement.Admin", "ApprovedByAdmin")
                        .WithMany()
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.StationManagement.Admin", "CreatedByAdmin")
                        .WithMany()
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookingManagement.Staff", "DroppedOffByStaff")
                        .WithMany()
                        .HasForeignKey("DroppedOffByStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.StationManagement.Station", "FromStation")
                        .WithMany()
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookingManagement.Staff", "PickedUpByStaff")
                        .WithMany()
                        .HasForeignKey("PickedUpByStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.BookingManagement.Staff", null)
                        .WithMany("VehicleTransfers")
                        .HasForeignKey("StaffId");

                    b.HasOne("Domain.Entities.StationManagement.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StationManagement.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByAdmin");

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("DroppedOffByStaff");

                    b.Navigation("FromStation");

                    b.Navigation("PickedUpByStaff");

                    b.Navigation("ToStation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Booking", b =>
                {
                    b.Navigation("Fees");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Renter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Kycs");
                });

            modelBuilder.Entity("Domain.Entities.BookingManagement.Staff", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("StaffAtStations");

                    b.Navigation("StaffTransfers");

                    b.Navigation("VehicleTransfers");

                    b.Navigation("VerifiedBookings");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Contract", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Inspection", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Entities.RentalManagement.Rental", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Station", b =>
                {
                    b.Navigation("StaffAtStations");

                    b.Navigation("VehicleAtStations");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.Vehicle", b =>
                {
                    b.Navigation("Pricings");

                    b.Navigation("Rentals");

                    b.Navigation("VehicleAtStations");
                });

            modelBuilder.Entity("Domain.Entities.StationManagement.VehicleAtStation", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
